name: build obs plugin

on:
  push:
    branches: [ master, streamup-optimisations ]
  pull_request:
    branches: [ master ]

env:
  PLUGIN_NAME: streamup
  OBS_VERSION: master

jobs:
  linux-in-tree:
    name: 'Linux'
    runs-on: ${{ matrix.ubuntu }}
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ['ubuntu-22.04']
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: "Checkout plugin"
        uses: actions/checkout@v4.1.1
        with:
          path: UI/frontend-plugins/${{ env.PLUGIN_NAME }}
      - name: Add plugin to obs cmake
        shell: bash
        run: echo "add_subdirectory(${{ env.PLUGIN_NAME }})" >> UI/frontend-plugins/CMakeLists.txt
      - name: Fetch Git Tags
        run: git fetch --prune --tags --unshallow
      - name: 'Configure'
        shell: bash
        run: |
          mkdir ./build
          cmake -S . -B "./build" -G Ninja -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DLINUX_PORTABLE=OFF -DENABLE_AJA=OFF -DENABLE_NEW_MPEGTS_OUTPUT=OFF -DBUILD_CAPTIONS=OFF -DWITH_RTMPS=OFF -DBUILD_BROWSER=OFF -DBUILD_VIRTUALCAM=OFF -DBUILD_VST=OFF -DENABLE_PIPEWIRE=OFF -DENABLE_SCRIPTING=OFF
      - name: 'Build'
        shell: bash
        run: |
          cmake --build "./build"
      - name: 'Package'
        shell: bash
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=${{ env.PLUGIN_NAME }}-$FILE_DATE-${{ github.sha }}-${{ matrix.ubuntu }}.tar.gz
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV
          mkdir -p ./${{ env.PLUGIN_NAME }}/bin/64bit/
          mv ./build/UI/frontend-plugins/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.so ./${{ env.PLUGIN_NAME }}/bin/64bit/${{ env.PLUGIN_NAME }}.so
          mv ./UI/frontend-plugins/${{ env.PLUGIN_NAME }}/data ./${{ env.PLUGIN_NAME }}/data
          tar -cvzf "${FILE_NAME}" ${{ env.PLUGIN_NAME }}
      - name: 'Publish'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: '${{ env.FILE_NAME }}'
          path: '*.tar.gz'
  windows-build:
    name: 'Windows Build'
    runs-on: [windows-latest]
    strategy:
      fail-fast: true
      matrix:
        target: [x64]
        include:
          - target: x64
            cmake_build: 'x64'
            deps_ext: '64'
    env:
      QT_VERSION: '6'
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_SYSTEM_VERSION: "10.0.26100.0"
      WINDOWS_DEPS_VERSION: '2025-08-23'
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
      - name: Checkout obs
        uses: actions/checkout@v4.1.1
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: Checkout plugin
        uses: actions/checkout@v4.1.1
        with:
          path: UI/frontend-plugins/${{ env.PLUGIN_NAME}}
      - name: Add plugin to obs cmake
        shell: cmd
        run: echo add_subdirectory(${{ env.PLUGIN_NAME }}) >> UI/frontend-plugins/CMakeLists.txt
      - name: Fetch Git Tags
        run: git fetch --prune --tags --unshallow
      - name: 'Install prerequisite: QT'
        run: |
          curl -kLO https://github.com/obsproject/obs-deps/releases/download/${{ env.WINDOWS_DEPS_VERSION }}/windows-deps-qt6-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -f --retry 5 -C -
          7z x windows-deps-qt6-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -o"${{ github.workspace }}/cmbuild/deps" -y -aoa
      - name: 'Install prerequisite: Pre-built dependencies'
        run: |
          curl -kLO https://github.com/obsproject/obs-deps/releases/download/${{ env.WINDOWS_DEPS_VERSION }}/windows-deps-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -f --retry 5 -C -
          7z x windows-deps-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -o"${{ github.workspace }}/cmbuild/deps" -y -aoa
      - name: Configure
        run: |
          mkdir ./package
          mkdir ./installer
          mkdir ./installer/media
          mkdir ./build
          cmake -S . -B "${{ github.workspace }}/build" -G"${{ env.CMAKE_GENERATOR }}" -DCMAKE_PREFIX_PATH:PATH="${{ github.workspace }}/cmbuild/deps" -A"${{ matrix.cmake_build }}" -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DBUILD_BROWSER=false -DBUILD_VST=false -DBUILD_VIRTUALCAM=false -DBUILD_CAPTIONS=false -DCOMPILE_D3D12_HOOK=false -DENABLE_SCRIPTING=false -DDepsPath="${{ github.workspace }}/cmbuild/deps" -DDepsPath${{ matrix.deps_ext }}="${{ github.workspace }}/cmbuild/deps" -DQTDIR="${{ github.workspace }}/cmbuild/deps/qt6" -DCOPIED_DEPENDENCIES=FALSE -DCOPY_DEPENDENCIES=TRUE -DENABLE_PLUGINS=FALSE -DDISABLE_PLUGINS=TRUE
      - name: 'Build'
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build\obs-studio.sln
      - name: Package
        if: success()
        run: |
          $env:FILE_NAME="${{ env.PLUGIN_NAME }}-${{ github.sha }}-windows-${{ matrix.target }}"
          echo "FILE_NAME=${env:FILE_NAME}" >> ${env:GITHUB_ENV}
          robocopy .\build\rundir\RelWithDebInfo\obs-plugins\${{ matrix.deps_ext }}bit\ .\package\obs-plugins\${{ matrix.deps_ext }}bit ${{ env.PLUGIN_NAME }}.* /E /XF .gitignore
          robocopy .\build\rundir\RelWithDebInfo\data\obs-plugins\${{ env.PLUGIN_NAME }}\ .\package\data\obs-plugins\${{ env.PLUGIN_NAME }}\ /E /XF .gitignore
          copy .\build\UI\frontend-plugins\${{ env.PLUGIN_NAME }}\installer.iss.in .\installer\installer.iss.in
          robocopy .\UI\frontend-plugins\${{ env.PLUGIN_NAME}}\media\ .\installer\media\ /E /XF .gitignore
          exit 0
      - name: Publish zip
        if: success()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: '${{ env.FILE_NAME }}'
          path: package/*
      - name: Publish Installer Files
        if: success() && matrix.target == 'x64'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: 'installer-files'
          path: installer/*
  windows-package:
    name: 'Windows Package'
    runs-on: [windows-latest]
    needs: [windows-build]
    steps:
      - name: Init
        if: success()
        run: |
          mkdir ./package
          $env:FILE_DATE=(Get-Date -UFormat "%F")
          $env:FILE_NAME="${{ env.PLUGIN_NAME }}-${env:FILE_DATE}-${{ github.sha }}-windows"
          echo "FILE_NAME=${env:FILE_NAME}" >> ${env:GITHUB_ENV}
          $env:FILE_NAME_X64="${{ env.PLUGIN_NAME }}-${{ github.sha }}-windows-x64"
          echo "FILE_NAME_X64=${env:FILE_NAME_X64}" >> ${env:GITHUB_ENV}
      - name: Retrieve x64 build
        uses: actions/download-artifact@v4.1.7
        with:
          name: '${{ env.FILE_NAME_X64 }}'
          path: ./package
      - name: Retrieve installer files
        uses: actions/download-artifact@v4.1.7
        with:
          name: 'installer-files'
          path: .
      - name: Publish zip
        if: success()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: '${{ env.FILE_NAME }}'
          path: package/*
      - name: "Package Installer (Prereqs)"
        run: |
          curl "-kL" "https://files.jrsoftware.org/is/6/innosetup-6.0.3.exe" "-f" "--retry" "5" "-o" "inno.exe"
          .\inno.exe /VERYSILENT /SP- /SUPPRESSMSGBOXES /NORESTART
      - name: "Package Installer (Compile)"
        run: |
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' /Qp ".\installer.iss.in"
      - name: Publish installer
        if: success()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: '${{ env.FILE_NAME }}-installer'
          path: package/*.exe
      - name: Remove temp artifacts
        uses: geekyeggo/delete-artifact@v4.1.0
        with:
          name: "${{ env.FILE_NAME_X64 }}"
